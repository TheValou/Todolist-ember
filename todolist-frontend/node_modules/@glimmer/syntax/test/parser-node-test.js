'use strict';

var _ = require('..');

var _support = require('./support');

const test = QUnit.test;
QUnit.module('[glimmer-syntax] Parser - AST');
test('a simple piece of content', function () {
    let t = 'some content';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('some content')]));
});
test('self-closed element', function () {
    let t = '<g />';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element({ name: 'g', selfClosing: true })]));
});
test('elements can have empty attributes', function () {
    let t = '<img id="">';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('img', [_.builders.attr('id', _.builders.text(''))])]));
});
test('disallowed quote in element space is rejected', function (assert) {
    let t = '<img foo="bar"" >';
    assert.throws(() => {
        (0, _.preprocess)(t);
    }, /Syntax error at line 1 col 14: " is not a valid character within attribute names/);
});
test('disallowed equals sign in element space is rejected', function (assert) {
    let t = '<img =foo >';
    assert.throws(() => {
        (0, _.preprocess)(t);
    }, /Syntax error at line 1 col 5: attribute name cannot start with equals sign/);
});
test('svg content', function () {
    let t = '<svg></svg>';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('svg')]));
});
test('html content with html content inline', function () {
    let t = '<div><p></p></div>';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('div', [], [], [_.builders.element('p')])]));
});
test('html content with svg content inline', function () {
    let t = '<div><svg></svg></div>';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('div', [], [], [_.builders.element('svg')])]));
});
let integrationPoints = ['foreignObject', 'desc', 'title'];
function buildIntegrationPointTest(integrationPoint) {
    return function integrationPointTest() {
        let t = '<svg><' + integrationPoint + '><div></div></' + integrationPoint + '></svg>';
        (0, _support.astEqual)(t, _.builders.program([_.builders.element('svg', [], [], [_.builders.element(integrationPoint, [], [], [_.builders.element('div')])])]));
    };
}
for (let i = 0, length = integrationPoints.length; i < length; i++) {
    test('svg content with html content inline for ' + integrationPoints[i], buildIntegrationPointTest(integrationPoints[i]));
}
test('a piece of content with HTML', function () {
    let t = 'some <div>content</div> done';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('some '), _.builders.element('div', [], [], [_.builders.text('content')]), _.builders.text(' done')]));
});
test('a piece of Handlebars with HTML', function () {
    let t = 'some <div>{{content}}</div> done';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('some '), _.builders.element('div', [], [], [_.builders.mustache(_.builders.path('content'))]), _.builders.text(' done')]));
});
test('Handlebars embedded in an attribute (quoted)', function () {
    let t = 'some <div class="{{foo}}">content</div> done';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('some '), _.builders.element('div', [_.builders.attr('class', _.builders.concat([_.builders.mustache('foo')]))], [], [_.builders.text('content')]), _.builders.text(' done')]));
});
test('Handlebars embedded in an attribute (unquoted)', function () {
    let t = 'some <div class={{foo}}>content</div> done';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('some '), _.builders.element('div', [_.builders.attr('class', _.builders.mustache(_.builders.path('foo')))], [], [_.builders.text('content')]), _.builders.text(' done')]));
});
test('Handlebars embedded in an attribute of a self-closing tag (unqouted)', function () {
    let t = '<input value={{foo}}/>';
    let element = _.builders.element('input', [_.builders.attr('value', _.builders.mustache(_.builders.path('foo')))], [], []);
    element.selfClosing = true;
    (0, _support.astEqual)(t, _.builders.program([element]));
});
test('Handlebars embedded in an attribute (sexprs)', function () {
    let t = 'some <div class="{{foo (foo "abc")}}">content</div> done';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('some '), _.builders.element('div', [_.builders.attr('class', _.builders.concat([_.builders.mustache(_.builders.path('foo'), [_.builders.sexpr(_.builders.path('foo'), [_.builders.string('abc')])])]))], [], [_.builders.text('content')]), _.builders.text(' done')]));
});
test('Handlebars embedded in an attribute with other content surrounding it', function () {
    let t = 'some <a href="http://{{link}}/">content</a> done';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('some '), _.builders.element('a', [_.builders.attr('href', _.builders.concat([_.builders.text('http://'), _.builders.mustache('link'), _.builders.text('/')]))], [], [_.builders.text('content')]), _.builders.text(' done')]));
});
test('A more complete embedding example', function () {
    let t = "{{embed}} {{some 'content'}} " + "<div class='{{foo}} {{bind-class isEnabled truthy='enabled'}}'>{{ content }}</div>" + " {{more 'embed'}}";
    (0, _support.astEqual)(t, _.builders.program([_.builders.mustache(_.builders.path('embed')), _.builders.text(' '), _.builders.mustache(_.builders.path('some'), [_.builders.string('content')]), _.builders.text(' '), _.builders.element('div', [_.builders.attr('class', _.builders.concat([_.builders.mustache('foo'), _.builders.text(' '), _.builders.mustache('bind-class', [_.builders.path('isEnabled')], _.builders.hash([_.builders.pair('truthy', _.builders.string('enabled'))]))]))], [], [_.builders.mustache(_.builders.path('content'))]), _.builders.text(' '), _.builders.mustache(_.builders.path('more'), [_.builders.string('embed')])]));
});
test('Simple embedded block helpers', function () {
    let t = '{{#if foo}}<div>{{content}}</div>{{/if}}';
    (0, _support.astEqual)(t, _.builders.program([_.builders.block(_.builders.path('if'), [_.builders.path('foo')], _.builders.hash(), _.builders.program([_.builders.element('div', [], [], [_.builders.mustache(_.builders.path('content'))])]))]));
});
test('Involved block helper', function () {
    let t = '<p>hi</p> content {{#testing shouldRender}}<p>Appears!</p>{{/testing}} more <em>content</em> here';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('p', [], [], [_.builders.text('hi')]), _.builders.text(' content '), _.builders.block(_.builders.path('testing'), [_.builders.path('shouldRender')], _.builders.hash(), _.builders.program([_.builders.element('p', [], [], [_.builders.text('Appears!')])])), _.builders.text(' more '), _.builders.element('em', [], [], [_.builders.text('content')]), _.builders.text(' here')]));
});
test('Element modifiers', function () {
    let t = "<p {{action 'boom'}} class='bar'>Some content</p>";
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('p', [_.builders.attr('class', _.builders.text('bar'))], [_.builders.elementModifier(_.builders.path('action'), [_.builders.string('boom')])], [_.builders.text('Some content')])]));
});
test('Tokenizer: MustacheStatement encountered in beforeAttributeName state', function () {
    let t = '<input {{bar}}>';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('input', [], [_.builders.elementModifier(_.builders.path('bar'))])]));
});
test('Tokenizer: MustacheStatement encountered in attributeName state', function () {
    let t = '<input foo{{bar}}>';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('input', [_.builders.attr('foo', _.builders.text(''))], [_.builders.elementModifier(_.builders.path('bar'))])]));
});
test('Tokenizer: MustacheStatement encountered in afterAttributeName state', function () {
    let t = '<input foo {{bar}}>';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('input', [_.builders.attr('foo', _.builders.text(''))], [_.builders.elementModifier(_.builders.path('bar'))])]));
});
test('Tokenizer: MustacheStatement encountered in afterAttributeValue state', function () {
    let t = '<input foo=1 {{bar}}>';
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('input', [_.builders.attr('foo', _.builders.text('1'))], [_.builders.elementModifier(_.builders.path('bar'))])]));
});
test('Tokenizer: MustacheStatement encountered in afterAttributeValueQuoted state', function () {
    let t = "<input foo='1'{{bar}}>";
    (0, _support.astEqual)(t, _.builders.program([_.builders.element('input', [_.builders.attr('foo', _.builders.text('1'))], [_.builders.elementModifier(_.builders.path('bar'))])]));
});
test('Stripping - mustaches', function () {
    let t = 'foo {{~content}} bar';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('foo'), _.builders.mustache(_.builders.path('content')), _.builders.text(' bar')]));
    t = 'foo {{content~}} bar';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('foo '), _.builders.mustache(_.builders.path('content')), _.builders.text('bar')]));
});
test('Stripping - blocks', function () {
    let t = 'foo {{~#wat}}{{/wat}} bar';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('foo'), _.builders.block(_.builders.path('wat'), [], _.builders.hash(), _.builders.program()), _.builders.text(' bar')]));
    t = 'foo {{#wat}}{{/wat~}} bar';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('foo '), _.builders.block(_.builders.path('wat'), [], _.builders.hash(), _.builders.program()), _.builders.text('bar')]));
});
test('Stripping - programs', function () {
    let t = '{{#wat~}} foo {{else}}{{/wat}}';
    (0, _support.astEqual)(t, _.builders.program([_.builders.block(_.builders.path('wat'), [], _.builders.hash(), _.builders.program([_.builders.text('foo ')]), _.builders.program())]));
    t = '{{#wat}} foo {{~else}}{{/wat}}';
    (0, _support.astEqual)(t, _.builders.program([_.builders.block(_.builders.path('wat'), [], _.builders.hash(), _.builders.program([_.builders.text(' foo')]), _.builders.program())]));
    t = '{{#wat}}{{else~}} foo {{/wat}}';
    (0, _support.astEqual)(t, _.builders.program([_.builders.block(_.builders.path('wat'), [], _.builders.hash(), _.builders.program(), _.builders.program([_.builders.text('foo ')]))]));
    t = '{{#wat}}{{else}} foo {{~/wat}}';
    (0, _support.astEqual)(t, _.builders.program([_.builders.block(_.builders.path('wat'), [], _.builders.hash(), _.builders.program(), _.builders.program([_.builders.text(' foo')]))]));
});
test('Stripping - removes unnecessary text nodes', function () {
    let t = '{{#each~}}\n  <li> foo </li>\n{{~/each}}';
    (0, _support.astEqual)(t, _.builders.program([_.builders.block(_.builders.path('each'), [], _.builders.hash(), _.builders.program([_.builders.element('li', [], [], [_.builders.text(' foo ')])]), null)]));
});
// TODO: Make these throw an error.
//test("Awkward mustache in unquoted attribute value", function() {
//  let t = "<div class=a{{foo}}></div>";
//  astEqual(t, b.program([
//    b.element('div', [ b.attr('class', concat([b.string("a"), b.sexpr([b.path('foo')])])) ])
//  ]));
//
//  t = "<div class=a{{foo}}b></div>";
//  astEqual(t, b.program([
//    b.element('div', [ b.attr('class', concat([b.string("a"), b.sexpr([b.path('foo')]), b.string("b")])) ])
//  ]));
//
//  t = "<div class={{foo}}b></div>";
//  astEqual(t, b.program([
//    b.element('div', [ b.attr('class', concat([b.sexpr([b.path('foo')]), b.string("b")])) ])
//  ]));
//});
test('an HTML comment', function () {
    let t = 'before <!-- some comment --> after';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('before '), _.builders.comment(' some comment '), _.builders.text(' after')]));
});
test('a Handlebars comment inside an HTML comment', function () {
    let t = 'before <!-- some {{! nested thing }} comment --> after';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('before '), _.builders.comment(' some {{! nested thing }} comment '), _.builders.text(' after')]));
});
test('a Handlebars comment', function () {
    let t = 'before {{! some comment }} after';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('before '), _.builders.mustacheComment(' some comment '), _.builders.text(' after')]));
});
test('a Handlebars comment in proper element space', function () {
    let t = 'before <div {{! some comment }} data-foo="bar" {{! other comment }}></div> after';
    (0, _support.astEqual)(t, _.builders.program([_.builders.text('before '), _.builders.element('div', [_.builders.attr('data-foo', _.builders.text('bar'))], [], [], [_.builders.mustacheComment(' some comment '), _.builders.mustacheComment(' other comment ')]), _.builders.text(' after')]));
});
test('a Handlebars comment in invalid element space', function (assert) {
    assert.throws(() => {
        (0, _.preprocess)('\nbefore <div \n  a{{! some comment }} data-foo="bar"></div> after');
    }, /Using a Handlebars comment when in the `attributeName` state is not supported: " some comment " on line 3:3/);
    assert.throws(() => {
        (0, _.preprocess)('\nbefore <div \n  a={{! some comment }} data-foo="bar"></div> after');
    }, /Using a Handlebars comment when in the `beforeAttributeValue` state is not supported: " some comment " on line 3:4/);
    assert.throws(() => {
        (0, _.preprocess)('\nbefore <div \n  a="{{! some comment }}" data-foo="bar"></div> after');
    }, /Using a Handlebars comment when in the `attributeValueDoubleQuoted` state is not supported: " some comment " on line 3:5/);
});
test('allow {{null}} to be passed as helper name', function () {
    let ast = (0, _.preprocess)('{{null}}');
    (0, _support.astEqual)(ast, _.builders.program([_.builders.mustache(_.builders.null())]));
});
test('allow {{null}} to be passed as a param', function () {
    let ast = (0, _.preprocess)('{{foo null}}');
    (0, _support.astEqual)(ast, _.builders.program([_.builders.mustache(_.builders.path('foo'), [_.builders.null()])]));
});
test('allow {{undefined}} to be passed as helper name', function () {
    let ast = (0, _.preprocess)('{{undefined}}');
    (0, _support.astEqual)(ast, _.builders.program([_.builders.mustache(_.builders.undefined())]));
});
test('allow {{undefined}} to be passed as a param', function () {
    let ast = (0, _.preprocess)('{{foo undefined}}');
    (0, _support.astEqual)(ast, _.builders.program([_.builders.mustache(_.builders.path('foo'), [_.builders.undefined()])]));
});
test('Handlebars partial should error', function (assert) {
    assert.throws(() => {
        (0, _.preprocess)('{{> foo}}');
    }, Error(`Handlebars partials are not supported: "{{> foo" at L1:C0`));
});
test('Handlebars partial block should error', function (assert) {
    assert.throws(() => {
        (0, _.preprocess)('{{#> foo}}{{/foo}}');
    }, new Error(`Handlebars partial blocks are not supported: "{{#> foo" at L1:C0`));
});
test('Handlebars decorator should error', function (assert) {
    assert.throws(() => {
        (0, _.preprocess)('{{* foo}}');
    }, new Error(`Handlebars decorators are not supported: "{{* foo" at L1:C0`));
});
test('Handlebars decorator block should error', function (assert) {
    assert.throws(() => {
        (0, _.preprocess)('{{#* foo}}{{/foo}}');
    }, new Error(`Handlebars decorator blocks are not supported: "{{#* foo" at L1:C0`));
});
test('disallowed mustaches in the tagName space', function (assert) {
    assert.throws(() => {
        (0, _.preprocess)('<{{"asdf"}}></{{"asdf"}}>');
    }, /Cannot use mustaches in an elements tagname: `{{"asdf"` at L1:C1/);
    assert.throws(() => {
        (0, _.preprocess)('<input{{bar}}>');
    }, /Cannot use mustaches in an elements tagname: `{{bar` at L1:C6/);
});
test('mustache immediately followed by self closing tag does not error', function () {
    let ast = (0, _.preprocess)('<FooBar data-foo={{blah}}/>');
    let element = _.builders.element('FooBar', [_.builders.attr('data-foo', _.builders.mustache('blah'))]);
    element.selfClosing = true;
    (0, _support.astEqual)(ast, _.builders.program([element]));
});
test('path expression with "dangling dot" throws error', function (assert) {
    assert.throws(() => {
        (0, _.preprocess)('{{if foo. bar baz}}');
    }, /'\.' is not a supported path in Glimmer; check for a path with a trailing '\.' at L1:C8/);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,