'use strict';

var _syntax = require('@glimmer/syntax');

const { test } = QUnit;
QUnit.module('[glimmer-syntax] Plugins - AST Transforms');
test('function based AST plugins can be provided to the compiler', assert => {
    assert.expect(1);
    (0, _syntax.preprocess)('<div></div>', {
        plugins: {
            ast: [() => ({
                name: 'plugin-a',
                visitor: {
                    Program() {
                        assert.ok(true, 'transform was called!');
                    }
                }
            })]
        }
    });
});
test('plugins are provided the syntax package', assert => {
    assert.expect(1);
    (0, _syntax.preprocess)('<div></div>', {
        plugins: {
            ast: [({ syntax }) => {
                assert.equal(syntax.Walker, _syntax.Walker);
                return { name: 'plugin-a', visitor: {} };
            }]
        }
    });
});
test('can support the legacy AST transform API via ASTPlugin', assert => {
    function ensurePlugin(FunctionOrPlugin) {
        if (FunctionOrPlugin.prototype && FunctionOrPlugin.prototype.transform) {
            return env => {
                return {
                    name: 'plugin-a',
                    visitor: {
                        Program(node) {
                            let plugin = new FunctionOrPlugin(env);
                            plugin.syntax = env.syntax;
                            return plugin.transform(node);
                        }
                    }
                };
            };
        } else {
            return FunctionOrPlugin;
        }
    }
    class Plugin {
        transform(program) {
            assert.ok(true, 'transform was called!');
            return program;
        }
    }
    (0, _syntax.preprocess)('<div></div>', {
        plugins: {
            ast: [ensurePlugin(Plugin)]
        }
    });
});
test('AST plugins can be chained', assert => {
    assert.expect(3);
    let first = () => {
        return {
            name: 'first',
            visitor: {
                Program(program) {
                    program['isFromFirstPlugin'] = true;
                }
            }
        };
    };
    let second = () => {
        return {
            name: 'second',
            visitor: {
                Program(node) {
                    assert.equal(node['isFromFirstPlugin'], true, 'AST from first plugin is passed to second');
                    node['isFromSecondPlugin'] = true;
                }
            }
        };
    };
    let third = () => {
        return {
            name: 'third',
            visitor: {
                Program(node) {
                    assert.equal(node['isFromSecondPlugin'], true, 'AST from second plugin is passed to third');
                    node['isFromThirdPlugin'] = true;
                }
            }
        };
    };
    let ast = (0, _syntax.preprocess)('<div></div>', {
        plugins: {
            ast: [first, second, third]
        }
    });
    assert.equal(ast['isFromThirdPlugin'], true, 'return value from last AST transform is used');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLW5vZGUtdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC90ZXN0L3BsdWdpbi1ub2RlLXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxBQUFPLEFBQ0wsQUFBVSxBQUVWLEFBQU0sQUFJUCxBQUFNLEFBQWlCLEFBQUM7O0FBRXpCLE1BQU0sRUFBRSxBQUFJLEFBQUUsU0FBRyxBQUFLLEFBQUM7QUFFdkIsQUFBSyxNQUFDLEFBQU0sT0FBQyxBQUEyQyxBQUFDLEFBQUM7QUFFMUQsQUFBSSxLQUFDLEFBQTRELDhEQUFFLEFBQU0sQUFBQyxBQUFFO0FBQzFFLEFBQU0sV0FBQyxBQUFNLE9BQUMsQUFBQyxBQUFDLEFBQUM7QUFFakIsQUFBVSw0QkFBQyxBQUFhO0FBQ3RCLEFBQU87QUFDTCxBQUFHO0FBRUMsQUFBSSxzQkFBRSxBQUFVO0FBQ2hCLEFBQU87QUFDTCxBQUFPO0FBQ0wsQUFBTSwrQkFBQyxBQUFFLEdBQUMsQUFBSSxNQUFFLEFBQXVCLEFBQUMsQUFBQyxBQUMzQztBQUFDLEFBQ0YsQUFDRixBQUFDLEFBQ0gsQUFDRixBQUNGLEFBQUMsQUFBQyxBQUNMO0FBVG1CO0FBRkosYUFBUCxBQUFHLEFBQUUsQUFBQyxDQURIO0FBREU7QUFEZTtBQWMzQixBQUFDLEFBQUM7QUFFSCxBQUFJLEtBQUMsQUFBeUMsMkNBQUUsQUFBTSxBQUFDLEFBQUU7QUFDdkQsQUFBTSxXQUFDLEFBQU0sT0FBQyxBQUFDLEFBQUMsQUFBQztBQUVqQixBQUFVLDRCQUFDLEFBQWE7QUFDdEIsQUFBTztBQUNMLEFBQUcsa0JBQ0QsQ0FBQyxFQUFFLEFBQU0sQUFBRSxBQUFFLEFBQUU7QUFDYixBQUFNLHVCQUFDLEFBQUssTUFBQyxBQUFNLE9BQUMsQUFBTSxBQUFFLEFBQU0sQUFBQyxBQUFDO0FBRXBDLHVCQUFPLEVBQUUsQUFBSSxNQUFFLEFBQVUsWUFBRSxBQUFPLFNB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LEFBQUMsQUFBQyxBQUMvRjtBQUFDLEFBQUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHByZXByb2Nlc3MsXG4gIFN5bnRheCxcbiAgV2Fsa2VyLFxuICBBU1QsXG4gIEFTVFBsdWdpbkVudmlyb25tZW50LFxuICBBU1RQbHVnaW5CdWlsZGVyLFxufSBmcm9tICdAZ2xpbW1lci9zeW50YXgnO1xuXG5jb25zdCB7IHRlc3QgfSA9IFFVbml0O1xuXG5RVW5pdC5tb2R1bGUoJ1tnbGltbWVyLXN5bnRheF0gUGx1Z2lucyAtIEFTVCBUcmFuc2Zvcm1zJyk7XG5cbnRlc3QoJ2Z1bmN0aW9uIGJhc2VkIEFTVCBwbHVnaW5zIGNhbiBiZSBwcm92aWRlZCB0byB0aGUgY29tcGlsZXInLCBhc3NlcnQgPT4ge1xuICBhc3NlcnQuZXhwZWN0KDEpO1xuXG4gIHByZXByb2Nlc3MoJzxkaXY+PC9kaXY+Jywge1xuICAgIHBsdWdpbnM6IHtcbiAgICAgIGFzdDogW1xuICAgICAgICAoKSA9PiAoe1xuICAgICAgICAgIG5hbWU6ICdwbHVnaW4tYScsXG4gICAgICAgICAgdmlzaXRvcjoge1xuICAgICAgICAgICAgUHJvZ3JhbSgpIHtcbiAgICAgICAgICAgICAgYXNzZXJ0Lm9rKHRydWUsICd0cmFuc2Zvcm0gd2FzIGNhbGxlZCEnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgIH0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3BsdWdpbnMgYXJlIHByb3ZpZGVkIHRoZSBzeW50YXggcGFja2FnZScsIGFzc2VydCA9PiB7XG4gIGFzc2VydC5leHBlY3QoMSk7XG5cbiAgcHJlcHJvY2VzcygnPGRpdj48L2Rpdj4nLCB7XG4gICAgcGx1Z2luczoge1xuICAgICAgYXN0OiBbXG4gICAgICAgICh7IHN5bnRheCB9KSA9PiB7XG4gICAgICAgICAgYXNzZXJ0LmVxdWFsKHN5bnRheC5XYWxrZXIsIFdhbGtlcik7XG5cbiAgICAgICAgICByZXR1cm4geyBuYW1lOiAncGx1Z2luLWEnLCB2aXNpdG9yOiB7fSB9O1xuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCdjYW4gc3VwcG9ydCB0aGUgbGVnYWN5IEFTVCB0cmFuc2Zvcm0gQVBJIHZpYSBBU1RQbHVnaW4nLCBhc3NlcnQgPT4ge1xuICBmdW5jdGlvbiBlbnN1cmVQbHVnaW4oRnVuY3Rpb25PclBsdWdpbjogYW55KTogQVNUUGx1Z2luQnVpbGRlciB7XG4gICAgaWYgKEZ1bmN0aW9uT3JQbHVnaW4ucHJvdG90eXBlICYmIEZ1bmN0aW9uT3JQbHVnaW4ucHJvdG90eXBlLnRyYW5zZm9ybSkge1xuICAgICAgcmV0dXJuIChlbnY6IEFTVFBsdWdpbkVudmlyb25tZW50KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogJ3BsdWdpbi1hJyxcblxuICAgICAgICAgIHZpc2l0b3I6IHtcbiAgICAgICAgICAgIFByb2dyYW0obm9kZTogQVNULlByb2dyYW0pIHtcbiAgICAgICAgICAgICAgbGV0IHBsdWdpbiA9IG5ldyBGdW5jdGlvbk9yUGx1Z2luKGVudik7XG5cbiAgICAgICAgICAgICAgcGx1Z2luLnN5bnRheCA9IGVudi5zeW50YXg7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHBsdWdpbi50cmFuc2Zvcm0obm9kZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gRnVuY3Rpb25PclBsdWdpbjtcbiAgICB9XG4gIH1cblxuICBjbGFzcyBQbHVnaW4ge1xuICAgIHN5bnRheCE6IFN5bnRheDtcblxuICAgIHRyYW5zZm9ybShwcm9ncmFtOiBBU1QuUHJvZ3JhbSk6IEFTVC5Qcm9ncmFtIHtcbiAgICAgIGFzc2VydC5vayh0cnVlLCAndHJhbnNmb3JtIHdhcyBjYWxsZWQhJyk7XG4gICAgICByZXR1cm4gcHJvZ3JhbTtcbiAgICB9XG4gIH1cblxuICBwcmVwcm9jZXNzKCc8ZGl2PjwvZGl2PicsIHtcbiAgICBwbHVnaW5zOiB7XG4gICAgICBhc3Q6IFtlbnN1cmVQbHVnaW4oUGx1Z2luKV0sXG4gICAgfSxcbiAgfSk7XG59KTtcblxudGVzdCgnQVNUIHBsdWdpbnMgY2FuIGJlIGNoYWluZWQnLCBhc3NlcnQgPT4ge1xuICBhc3NlcnQuZXhwZWN0KDMpO1xuXG4gIGxldCBmaXJzdCA9ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogJ2ZpcnN0JyxcbiAgICAgIHZpc2l0b3I6IHtcbiAgICAgICAgUHJvZ3JhbShwcm9ncmFtOiBBU1QuUHJvZ3JhbSkge1xuICAgICAgICAgIHByb2dyYW1bJ2lzRnJvbUZpcnN0UGx1Z2luJ10gPSB0cnVlO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuICB9O1xuXG4gIGxldCBzZWNvbmQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICdzZWNvbmQnLFxuICAgICAgdmlzaXRvcjoge1xuICAgICAgICBQcm9ncmFtKG5vZGU6IEFTVC5Qcm9ncmFtKSB7XG4gICAgICAgICAgYXNzZXJ0LmVxdWFsKFxuICAgICAgICAgICAgbm9kZVsnaXNGcm9tRmlyc3RQbHVnaW4nXSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAnQVNUIGZyb20gZmlyc3QgcGx1Z2luIGlzIHBhc3NlZCB0byBzZWNvbmQnXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIG5vZGVbJ2lzRnJvbVNlY29uZFBsdWdpbiddID0gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfTtcblxuICBsZXQgdGhpcmQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICd0aGlyZCcsXG4gICAgICB2aXNpdG9yOiB7XG4gICAgICAgIFByb2dyYW0obm9kZTogQVNULlByb2dyYW0pIHtcbiAgICAgICAgICBhc3NlcnQuZXF1YWwoXG4gICAgICAgICAgICBub2RlWydpc0Zyb21TZWNvbmRQbHVnaW4nXSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAnQVNUIGZyb20gc2Vjb25kIHBsdWdpbiBpcyBwYXNzZWQgdG8gdGhpcmQnXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIG5vZGVbJ2lzRnJvbVRoaXJkUGx1Z2luJ10gPSB0cnVlO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuICB9O1xuXG4gIGxldCBhc3QgPSBwcmVwcm9jZXNzKCc8ZGl2PjwvZGl2PicsIHtcbiAgICBwbHVnaW5zOiB7XG4gICAgICBhc3Q6IFtmaXJzdCwgc2Vjb25kLCB0aGlyZF0sXG4gICAgfSxcbiAgfSk7XG5cbiAgYXNzZXJ0LmVxdWFsKGFzdFsnaXNGcm9tVGhpcmRQbHVnaW4nXSwgdHJ1ZSwgJ3JldHVybiB2YWx1ZSBmcm9tIGxhc3QgQVNUIHRyYW5zZm9ybSBpcyB1c2VkJyk7XG59KTtcbiJdfQ==